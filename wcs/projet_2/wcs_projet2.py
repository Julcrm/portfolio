import streamlit as st
from wcs.projet_2.reco import afficher_reco
from wcs.projet_2.viz import afficher_viz

def afficher_wcs_projet2():
    # Initialisation de la variable pour suivre la page active
    if "page_projet2" not in st.session_state:
        st.session_state.page_projet2 = "accueil"  # Par d√©faut, la page d'accueil du projet 2 est affich√©e

    # D√©finition d'une fonction pour changer la page active
    def set_page(page_name):
        st.session_state.page_projet2 = page_name  # Modification de la variable pour changer de page

    # Configuration de la barre de navigation avec plusieurs colonnes
    col1, col2, col3, col4, col5 = st.columns([1, 2, 2, 2, 1])  # Distribution des colonnes
    with col2:
        if st.button("Accueil", use_container_width=True):  # Bouton Accueil
            set_page("accueil")  # Change la page en 'accueil' lorsque ce bouton est press√©
    with col3:
        if st.button("Visualisations", use_container_width=True):  # Bouton Visualisations
            set_page("viz")  # Change la page en 'viz' lorsque ce bouton est press√©
    with col4:
        if st.button("Recommandation", use_container_width=True):  # Bouton Recommandation
            set_page("reco")  # Change la page en 'reco' lorsque ce bouton est press√©

    # Ajout d'un espacement entre la navigation et le contenu de la page
    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    # Affichage de la page correspondant √† la variable `st.session_state.page_projet2`
    if st.session_state.page_projet2 == "accueil":

        # Titre + explication du projet
        st.markdown("<h1 style='text-align: center; color: white;'>Projet 2 : Analyse de donn√©es et Machine Learning dans le Cin√©ma</h1>", unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")


        # Disposition de l'image du logo (centr√©e sur la page)
        col1, col2, col3 = st.columns([3, 2, 3])  # Cr√©ation de trois colonnes de largeur relative (col2 sera au centre)
        with col2:  # Affichage de l'image dans la colonne du centre
            st.image("wcs/projet_2/logo_sans_fond.png", width=150)  # L'image est redimensionn√©e √† 10% de sa largeur d'origine

        #Espace
        st.write("")
        st.write("")


        st.markdown("""
        <div style='text-align: center; color: white; font-size: 20px;'>
        Dans ce projet, j'ai travaill√© sur l'analyse du march√© du cin√©ma et le d√©veloppement d'un moteur de recommandation bas√© sur le Machine Learning.  
        L'objectif √©tait d'aider un cin√©ma local √† mieux comprendre son public et √† proposer des films adapt√©s √† ses pr√©f√©rences.<br><br>
        Vous pouvez naviguer dans avec les onglets visualisation et recommandation,<br>
        </div>
        """, unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")


        # √âtapes du projet
        st.markdown("""
        ## üîç √âtapes r√©alis√©es :
        """)

        #Espace
        st.write("")
        st.write("")

        st.markdown("""
        ### 1Ô∏è‚É£ Analyse des donn√©es avec Pandas üìä :
        - R√©cup√©ration des donn√©es depuis TMDB et IMDB.
        - Exploration et traitement des donn√©es relatives aux films, genres, r√©alisateurs et audiences.
        - Identification des tendances cl√©s du march√© du cin√©ma (genres populaires, r√©alisateurs appr√©ci√©s, etc.).
        """)

        # URL vers le notebook traitement h√©berg√©
        traitement = "https://nbviewer.org/github/Julcrm/Recommandation_films/blob/9ee7c720c705630ecd7b3f5b8579a500a9909682/traitements.ipynb"

        #Espace
        st.write("")

        # Affichage avec iframe
        with st.expander("Cliquez ici pour afficher le notebook traitement et nettoyage des donn√©es"):
            st.markdown(f'<iframe src="{traitement}" width="100%" height="800px"></iframe>', unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")

        st.markdown("""
        ### 2Ô∏è‚É£ Cr√©ation d‚Äôun moteur de recommandation avec Scikit-Learn üß† :
        - Mise en place d'un pipeline pour g√©rer les donn√©es num√©riques et cat√©gorielles.
        - Mise en place d‚Äôun algorithme de recommandation bas√© sur le mod√®le NearestNeighbors.
        - Attribution de poids aux diff√©rentes cat√©gories.
        - Optimisation et validation des performances du mod√®le.
        """)
        
        # URL vers le notebook machine learning h√©berg√©
        machine_learning= "https://nbviewer.org/github/Julcrm/Recommandation_films/blob/9ee7c720c705630ecd7b3f5b8579a500a9909682/reco.ipynb"

        #Espace
        st.write("")

        # Affichage avec iframe
        with st.expander("Cliquez ici pour afficher le notebook machine learning"):
            st.markdown(f'<iframe src="{machine_learning}" width="100%" height="800px"></iframe>', unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")

        st.markdown("""
        ### 3Ô∏è‚É£ D√©veloppement d‚Äôun outil interactif avec Streamlit üåê :
        - Pr√©sentation des r√©sultats de l‚Äôanalyse du march√© sous forme de graphiques.
        """)

        #Espace
        st.write("")

        with st.expander("Cliquez ici pour afficher le code de la page visualisations"):
            st.code('''# ID du fichier Google Drive
    df_top_pays_id = '13ZGjbFR2_qjOic_hzU4JQvkMvuJ2pfB4'
    df_time_id = '1npUK9DA-EZEbueW8RT-WZIPhlEuxtC7P'
    df_pop_note_id = '1E-jCLT4Ez5X9suxB-AOY597QDpHoR4SP'
    df_real_id = '1qHDuLSY8ZZ-JOTK1jOMgNahVSqjm_JT3'

    # Lien t√©l√©chargeable
    url = "https://drive.google.com/uc?id="

    cache = Cache("/data")

    if "df_top_pays" not in cache:
        cache["df_top_pays"] = pd.read_parquet(url + df_top_pays_id)
    df_top_pays = cache["df_top_pays"]
    
    if "df_time" not in cache:
        cache["df_time"] = pd.read_parquet(url + df_time_id)
    df_time = cache["df_time"]

    if "df_pop_note" not in cache:
        cache["df_pop_note"] = pd.read_csv(url + df_pop_note_id)
    df_pop_note = cache["df_pop_note"]

    if "df_real" not in cache:
        cache["df_real"] = pd.read_csv(url + df_real_id)
    df_real = cache["df_real"]


    # Disposition des colonnes pour l'affichage avec Streamlit
    col1, col2 = st.columns([1, 1])

    # D√©but de la colonne 1
    with col1:
        # Graphique des pays : Top 15 des pays producteurs de films
        pays_chart = px.bar(
            df_top_pays,
            x="pays",
            y="score",
            labels={"pays": "Pays", "score": "Score"}
        )
        pays_chart.update_layout(title_text='Top 15 des pays producteurs de films', title_x=0.4)
        pays_chart.update_traces(marker_color="#9B1B30")
        st.plotly_chart(pays_chart)

        # Explication du graphique des pays
        with st.expander("Explications"):
            st.write("""
                    **(1)**  

                    Ce graphique en barres met en avant le **top 15 des pays producteurs de films**, gr√¢ce √† un score combinant :  
                    - Le **nombre moyen de films produits par pays**.  
                    - Leur **popularit√© √† l‚Äô√©chelle mondiale**.  
                    """)

        # Graphique Popularit√© vs Note : Relation entre la note des films et leur popularit√©
        pop_chart = px.bar(
            df_pop_note,
            x="groupes",
            y="popularity",
            labels={"popularity": "Popularit√©", "groupes": "Note"}
        )
        pop_chart.update_layout(title_text='Popularit√© en fonction de la note', title_x=0.4)
        pop_chart.update_traces(marker_color="#9B1B30")
        st.plotly_chart(pop_chart)

        # Explication du graphique Popularit√© vs Note
        with st.expander("Explications"):
            st.write("""
                    **(3)**  

                    Le graphique en barres montre la relation entre la note des films (sur une √©chelle de 1 √† 10) et leur popularit√© (sur une √©chelle de 0 √† 5).  

                    On remarque que :  
                    - Les films not√©s **1/10** sont en r√©alit√© plus populaires que ceux not√©s **10/10**.  
                    - Les films ayant des notes comprises entre **2/10 et 9/10** affichent des scores de popularit√© similaires.  

                    Par cons√©quent, j'ai choisi de **ne pas appliquer de filtre** bas√© sur la note ou la popularit√©, car ces crit√®res ne semblent pas avoir un impact d√©terminant sur la popularit√© d'un film.  
                    """)

        # Graphique des r√©alisateurs : Nombre de films r√©alis√©s par les cin√©astes
        nb_films = df_real["Real"].value_counts()
        nb_real = nb_films.value_counts().sort_index()
        x = nb_real.index
        y = nb_real.values  
        real_chart = px.bar(x=x, 
                            y=y, 
                            labels={'x': 'Nombre de films r√©alis√©s', 'y': 'Nombre de r√©alisateurs'}
                            )
        real_chart.update_layout(title_text='Nombre de films r√©alis√©s par les cin√©astes', title_x=0.3)
        real_chart.update_xaxes(range=[0, 10])
        real_chart.update_traces(marker_color="#9B1B30")
        st.plotly_chart(real_chart)

        # Explication du graphique des r√©alisateurs
        with st.expander("Explications"):
            st.write("""
                    **(5)**  

                    Le graphique en barres montre la distribution du **nombre de films r√©alis√©s par les cin√©astes** :  
                    - Environ **25 000 r√©alisateurs** n‚Äôont r√©alis√© qu‚Äôun seul film.  
                    - **6 000 r√©alisateurs** en ont r√©alis√© deux.  
                    - Moins de **2 500 r√©alisateurs** en ont r√©alis√© trois ou plus.  

                    Nous n‚Äôavons appliqu√© **aucun filtre concernant les r√©alisateurs**.  
                    Cependant, malgr√© le nombre important de r√©alisateurs avec une filmographie limit√©e, j'ai choisi d‚Äôaccorder un **poids significatif √† ce crit√®re dans l'algorithme**.  
                    """)

    # D√©but de la colonne 2
    with col2:
        # Graphique du Bilan annuel CNC : R√©partition des entr√©es par nationalit√© de film
        labels = 'Fran√ßais', 'Am√©ricains', 'Europ√©ens', 'Autres'
        sizes = [70.6, 74.1, 22.9, 8.8]

        cnc_chart = px.pie(
                           values=sizes,
                           names=labels, 
                           color_discrete_sequence=px.colors.sequential.RdBu)
        cnc_chart.update_layout(title_text='Bilan annuel CNC', title_x=0.4)
        st.plotly_chart(cnc_chart)

        # Explication du graphique CNC
        with st.expander("Explications"):
            st.write("""
                    **(2)** 

                    Bas√© sur le bilan annuel du **CNC de 2023**, ce graphique en secteurs montre la r√©partition des **entr√©es en salle** pour chaque nationalit√© de film.  
                    Un nombre √©lev√© d'entr√©es refl√®te g√©n√©ralement l‚Äôattractivit√© d‚Äôun film aupr√®s du public fran√ßais, influenc√©e par sa popularit√©.  

                    Afin de concevoir un syst√®me de recommandation le plus √©quilibr√© possible, j'ai choisi :  
                    - **D‚Äôint√©grer les films produits par les pays du top 15 (1)**.  
                    - Tout en incluant √©galement les **films europ√©ens qui n‚Äôy figurent pas**.  
                    """)

        # Graphique de l'√©volution de la dur√©e des films au fil du temps
        time_chart = px.line(df_time, 
                             x="ann√©e", 
                             y="temps_minutes",
                             labels={"ann√©e": "Ann√©e", "temps_minutes": "Dur√©e en minutes"}
                             )
        time_chart.update_traces(line_color="#922E44",
                                 line=dict(width=4))
        time_chart.update_layout(
        xaxis=dict(range=[1900, 2029]),
        yaxis=dict(range=[0, 125]),
        )
        time_chart.update_layout(title_text='√âvolution de la dur√©e des films au cours des ann√©es', title_x=0.3)
        st.plotly_chart(time_chart)

        # Explication du graphique de la dur√©e des films
        with st.expander("Explications"):
            st.write("""
                    **(4)**  

                    Ce graphique met en √©vidence que la **dur√©e des films** n‚Äôa pas connu de changements majeurs au fil du temps.  
                    En cons√©quence, j'ai choisi de **ne pas appliquer de filtre** sur la dur√©e des films dans le syst√®me de recommandation.  
                    """)
    # Ajout de style personnalis√© √† la page via Markdown
    st.markdown("""
        <style>
        /* Ajuste les balises Markdown g√©n√©r√©es si elles ne sont pas automatiquement dans des balises <p> */
        body div[role="document"] {
            font-size: 18px;
            line-height: 1.5;
        }
        </style>
        """, unsafe_allow_html=True)

    # Disposition des colonnes pour l'affichage de la conclusion et des crit√®res de pond√©ration
    col3, col4, col5 = st.columns([1, 2, 1])

    # Colonne 3 : vide
    with col3:
        st.write("")

    # Colonne 4 : Contenu de la conclusion
    with col4:
        st.markdown("""
        ### <h3 style="text-align:center;">Conclusion</h3>
        J'ai d√©cid√© de filtrer les films uniquement en fonction de **leur pays de production**, pr√©f√©rant affiner notre algorithme de recommandation.  
        J'assure ainsi de recommander des films ayant une **forte visibilit√©** et en lien avec les attentes culturelles des utilisateurs, tout en maintenant de la **diversit√©** gr√¢ce √† l‚Äôinclusion des films europ√©ens qui n‚Äôapparaissent pas dans le top 15 mondial.  

        J'ai ajust√© soigneusement la **pond√©ration** en fonction de l‚Äôimportance de chaque crit√®re.
        """, unsafe_allow_html=True)

    # Colonne 5 : vide
    with col5:
        st.write("")

    # Disposition des colonnes pour l'affichage des crit√®res sp√©cifiques
    col6, col7, col8 = st.columns([1, 2, 1])

    # Colonne 6 : Genre et ann√©e de parution
    with col6:
        # Affichage du poids du genre
        st.markdown("""
        #### <h4 style="text-align:center;">**Genre**</h4>  
        Le genre a re√ßu un poids √©lev√© bas√© sur le rapport du CNC, o√π j'ai constat√© que les Fran√ßais consommaient beaucoup de com√©dies, drames, films d‚Äôaventure et d‚Äôanimation.  
        """, unsafe_allow_html=True)
        st.write("")  # Espace vide pour a√©rer
        st.write("")  # Espace vide pour a√©rer

        # Affichage de la pond√©ration de l'ann√©e de parution
        st.markdown("""
        #### <h4 style="text-align:center;">**Poids de l‚Äôann√©e de parution**</h4>  
        L‚Äôann√©e de parution n‚Äôa √©t√© ni minor√©e ni major√©e.
        """, unsafe_allow_html=True)

    # Colonne 7 : R√©alisateur et note
    with col7:
        # Affichage du poids du r√©alisateur
        st.markdown("""
        #### <h4 style="text-align:center;">**R√©alisateur**</h4>  
        Le r√©alisateur a b√©n√©fici√© d‚Äôun poids √©lev√©, bien que la plupart n‚Äôaient r√©alis√© qu‚Äôun seul film (5). J'ai √©quilibr√© cette pond√©ration en tenant compte d‚Äôautres crit√®res (ann√©e de parution, genre, popularit√©‚Ä¶) pour garantir une recommandation diverse et pertinente.  
        Cela met en lumi√®re des r√©alisateurs ayant une vision artistique particuli√®re tout en offrant une exp√©rience adapt√©e aux go√ªts des utilisateurs.  
        """, unsafe_allow_html=True)

        # Affichage du poids de la note
        st.markdown("""
        #### <h4 style="text-align:center;">**Note**</h4>  
        La note a obtenu un poids l√©g√®rement inf√©rieur. Bien que la popularit√© et la note ne soient pas toujours corr√©l√©es, j'ai pr√©serv√© cet indicateur pour inclure des films d‚Äôart et d‚Äôessai moins populaires tout en maintenant la diversit√© des propositions (3). 
        """, unsafe_allow_html=True)

    # Colonne 8 : Nombre de votes et dur√©e
    with col8:
        # Affichage du poids du nombre de votes
        st.markdown("""
        #### <h4 style="text-align:center;">**Nombre de votes**</h4>  
        Le nombre de votes a √©t√© l√©g√®rement minor√©, car il peut √™tre influenc√© par des facteurs externes tels que la visibilit√© ou des campagnes de promotion, ce qui ne refl√®te pas toujours la qualit√© globale.  
        """, unsafe_allow_html=True)
        st.write("")  # Espace vide pour a√©rer
        st.write("")  # Espace vide pour a√©rer

        # Affichage de la pond√©ration de la dur√©e
        st.markdown("""
        #### <h4 style="text-align:center;">**Dur√©e**</h4>  
        La dur√©e a re√ßu une pond√©ration n√©gative faible, car elle pr√©sente peu de variation au fil du temps et semble peu significative sur les pr√©f√©rences des utilisateurs (4).  
        """, unsafe_allow_html=True)
        st.write("")  # Espace vide pour a√©rer
        st.write("")  # Espace vide pour a√©rer
        st.write("")  # Espace vide pour a√©rer
        st.write("")  # Espace vide pour a√©rer

    # Disposition des colonnes pour le r√©sum√©
    col9, col10, col11 = st.columns([1, 2, 1])

    # Colonne 10 : R√©sum√© de la recommandation
    with col10:
        st.markdown("""
        **En r√©sum√©** : J'ai pris en compte ces diff√©rents crit√®res pour offrir une recommandation √©quilibr√©e et diversifi√©e, r√©pondant aux go√ªts des utilisateurs tout en valorisant la richesse cin√©matographique mondiale et europ√©enne.
        """, unsafe_allow_html=True''')
                    
        st.markdown("""
        - Int√©gration du moteur de recommandation dans une application Streamlit pour une utilisation facile et intuitive.
        - Int√©gration d'une interface de recommandation avec l'API de l'IA Gemini.
        """)

        #Espace
        st.write("")

        with st.expander("Cliquez ici pour afficher le code de la page recommandation"):
            st.code(''' # ID du fichier Google Drive
    df_poster_id = '1AvzyoeBvwpNQlssF71PG8Ikr6QlpNSYV'
    df_reco_id = '1nHKijrPb-e_r8-5CSXFbiso44lIovARD'
    df_gemini_id = '1eVlcDdtSJen9IEo_MvIvKz3McBQQ1Ns_'

    # Lien t√©l√©chargeable
    url = "https://drive.google.com/uc?id="

    cache = Cache("/data")

    if "df_poster" not in cache:
        cache["df_poster"] = pd.read_parquet(url + df_poster_id)
    df_poster = cache["df_poster"]
    
    if "df_reco" not in cache:
        cache["df_reco"] = pd.read_parquet(url + df_reco_id)
    df_reco = cache["df_reco"]

    if "df_gemini" not in cache:
        cache["df_gemini"] = pd.read_csv(url + df_gemini_id)
    df_gemini = cache["df_gemini"]


    st.markdown("""
        <style>
        /* Style pour le texte */
        p {
            text-align: center;
            font-size: 20px;
            color: white;
        }
                
        h3 {
            text-align: center; }
        iframe {
                text-align: center;
                }
        </style>""", unsafe_allow_html=True)


    st.markdown("<p>Soir√©e entre amis, film en solo, en couple ou en famille ?</p>", unsafe_allow_html=True)

    st.markdown("<h3> Moteur de recommandation </h3>", unsafe_allow_html=True)

    st.text("Tapez le d√©but d‚Äôun titre qui vous pla√Æt, choisissez parmi les suggestions, et laissez notre syst√®me d√©nicher 5 films qui pourraient vous divertir!" )

    st.text("Un trou de m√©moire pour le titre mais vous √™tes certain du nom du r√©alisateur ? La barre de recherche filtrera les titres pour vous.")
    col1, col2 = st.columns([1, 2])  # Centrer et d√©finir les proportions
    with col1:
        option_real = st.selectbox(
            "filtrer par r√©alisateur",
            options = df_poster["Real"].unique(),
            format_func=lambda x: x if st.session_state.get("search_query", "").lower() in x.lower() else None, index=None, placeholder="Choisissez un r√©alisateur",
            label_visibility = "hidden"
        )

        if option_real:
            variable_options = df_poster["id"].loc[df_poster["Real"] == option_real]    
        else:
            variable_options = df_poster["id"]

    with col2:
        option = st.selectbox(
            "selection film",
            options = variable_options,
            format_func=lambda x: x if st.session_state.get("search_query", "").lower() in x.lower() else None, index=None, placeholder="Choisissez un film",
            label_visibility = "hidden"
        )
    image_url = "https://image.tmdb.org/t/p/original"

    if option:
        resultat = df_reco.loc[df_reco["id"] == option] # Source + reco
        if not resultat.empty: #S'il y a quelquechose dans la barre
            # Recherche de l'index de la source
            recherche = resultat["source"].iloc[0] #R√©cup√®re l'index du film "option"
            titre_str =  df_poster["titre"].iloc[recherche] #Renvoie l'id du film "option"
            if df_poster['poster_path'].iloc[recherche] is None: # Si pas de poster
                poster_url = "https://i.imghippo.com/files/ZOcN3975ToU.png" #Affiche le logo
            else:
                poster_url = image_url + df_poster['poster_path'].iloc[recherche] #Sinon, l'image du film

            # **Affichage du premier film (au-dessus des recommandations)**
            st.markdown(
                f"""
                <div style="text-align: center;">
                    <h2>Film s√©lectionn√©</h2>
                    <p><strong>{titre_str}</strong></p>
                    <img src="{poster_url}" alt="Poster" style="width: 250px;">
                    <p>üìÖ <strong>Ann√©e :</strong> {df_poster['ann√©e'].iloc[recherche]}</p>
                    <p>üé• <strong>R√©alisateur :</strong> {df_poster['Real'].iloc[recherche]}</p>
                </div>
                """,
                unsafe_allow_html=True
            )
            
            # Ajouter un s√©parateur et plusieurs espaces vides
            st.empty()
            st.divider()
            st.empty()
        
            
            # **Affichage des recommandations**
            st.markdown(
                f"""
                <div style="text-align: center;">
                    <h2>Suggestions similaires</h2>
                """,
                unsafe_allow_html=True
            )
            columns = st.columns(5)  # Cr√©ation des 5 colonnes
            
            # R√©cup√©ration des recommandations
            recos = list(resultat[["r1", "r2", "r3", "r4", "r5"]].values)[0]
            titres = df_poster["id"].iloc[recos].tolist()
            annee = df_poster["ann√©e"].iloc[recos].tolist()
            real = df_poster["Real"].iloc[recos].tolist()
            poster = df_poster["poster_path"].iloc[recos].tolist()

            # Affichage des recommandations dans les colonnes
            for i, (titre, annee, realisateur, poster_path) in enumerate(zip(titres, annee, real, poster)):
                liste_titre_reco = titre.split("-")
                titre_no_date_reco = " ".join(liste_titre_reco[:-1])
                with columns[i % 5]:  # R√©partir les films sur 5 colonnes
                    st.markdown(f"{titre_no_date_reco}", unsafe_allow_html=True )
                    if poster_path is None :
                        st.image("wcs/projet_2/logo_sans_fond.png", width=150)
                        st.text(f"üìÖ Ann√©e : {annee}")
                        st.text(f"üé• R√©alisateur : {realisateur}")
                    else:
                        st.image(f"{image_url}{poster_path}", width=150)
                        st.text(f"üìÖ Ann√©e : {annee}")
                        st.text(f"üé• R√©alisateur : {realisateur}")
                    
        else:
            st.warning("Aucun r√©sultat trouv√© pour cette s√©lection.")

    else:
        with col2:
            st.info("Veuillez chercher un film.")


    def dataframe_to_context(df):
        # Transformer chaque ligne en une phrase descriptive
        context = "\n".join(
            df.apply(
                lambda row: (
                    f"{row['id']}"
                ),
                axis=1,
            )
        )
        return f"Voici les films disponibles :\n{context}"

    context = dataframe_to_context(df_gemini)

    # Interface utilisateur
    st.markdown("<h3> Demandez √† l'IA ü§ñ </h3>", unsafe_allow_html=True)
    st.text("Vous ne savez pas pr√©cis√©ment quel film vous inspire ? Demandez √† l'IA un genre, un th√®me, un r√©alisateur ! Essayez donc avec 'film de sorcier', ou 'Tim Burton' par exemple. Le choix de film avec notre Robot est limit√©, si vous avez un film en t√™te, tapez le dans la barre de recherche ‚¨ÜÔ∏è")
    user_query = st.text_input("Input gemini", label_visibility="hidden", placeholder="Quel type de film voulez-vous regarder ?")

    if user_query:  # Assurer que user_query n'est pas vide
        url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
        api_key = os.getenv('api')

        payload = {
            "contents": [
                {
                    "parts": [
                        {"text": f"""Je cherche des films qui correspondent √† la demande suivante : {user_query}.
                        Pour chaque film de cette liste {context}, assure-toi qu'il correspond bien √† la demande en termes de genre, d'intrigue, ou d'autres crit√®res.
                        Affiche les ID des 5 films qui correspondent le mieux tel qui sont exactement √©cris dans {context}, et rien d'autre, sous forme de liste et n'√©cris rien d'autres."""}
                    ]
                }
            ]
        }

        headers = {
            "Content-Type": "application/json"
        }

        response = requests.post(url, headers=headers, json=payload, params={"key": api_key})
        
        response_json = response.json()
        films_text = response_json['candidates'][0]['content']['parts'][0]['text']

        cleaned_text = re.sub(r'\*', '', films_text)
        film_titles = cleaned_text.strip().splitlines()

        # Cr√©er une liste pour stocker les titres trouv√©s dans le DataFrame
        titre_gemini = []
        annee_gemini = []
        real_gemini = []
        poster_gemini = []
    
    # Filtrer le DataFrame pour chaque titre extrait et ajouter les r√©sultats
        for el in film_titles:
            el = el.strip()
            filtered_df = df_poster[df_poster['id'] == el]

            if not filtered_df.empty:  # V√©rifier si le DataFrame n'est pas vide
                titre_gemini.append(filtered_df['titre'].values[0])
                annee_gemini.append(filtered_df['ann√©e'].values[0])
                real_gemini.append(filtered_df['Real'].values[0])
                poster_gemini.append(filtered_df['poster_path'].values[0])

        # Si aucun film n'a √©t√© trouv√©, afficher un message d'avertissement
        if not titre_gemini:
            st.warning("Aucun film trouv√© correspondant √† votre recherche.")
        else:
            columns = st.columns(5)

            # Affichage des recommandations dans les colonnes
            for i, (titre_g, annee_g, realisateur_g, poster_path_g) in enumerate(zip(titre_gemini, annee_gemini, real_gemini, poster_gemini)):
                with columns[i % 5]:  # R√©partir les films sur 5 colonnes
                    st.markdown(f"{titre_g}", unsafe_allow_html=True)

                    # V√©rification si le poster est disponible
                    if not poster_path_g:
                        st.image("wcs/projet_2/logo_sans_fond.png", width=150)  # Afficher une image par d√©faut si aucun poster n'est trouv√©
                    else:
                        st.image(f"{image_url}{poster_path_g}", width=150)  # Afficher l'image du poster

                    # Affichage des autres informations
                    st.text(f"üìÖ Ann√©e : {annee_g}")
                    st.text(f"üé• R√©alisateur : {realisateur_g}")

    else:
        st.warning("Veuillez entrer un type de film pour obtenir des recommandations.")
    ''')

        #Espace
        st.write("")
        st.write("")

        # R√©sultat
        st.markdown("""
        ## üí° R√©sultat :
        Un outil puissant et intuitif, offrant :
        - Un tableau de bord pour explorer les tendances du march√© du cin√©ma.
        - Un moteur de recommandation selon le film choisi ou une interface de recommandation selon la demande. 
        """)

        #Espace
        st.write("")

        st.markdown("""
        Ce projet a permis de d√©montrer la puissance des donn√©es et du Machine Learning dans un domaine cr√©atif comme le cin√©ma.
        """)


    elif st.session_state.page_projet2 == "viz":
        # Page de visualisation : Appel de la fonction pour afficher les visualisations
        afficher_viz()

    elif st.session_state.page_projet2 == "reco":
        # Page de recommandations : Appel de la fonction pour afficher les recommandations
        afficher_reco()


