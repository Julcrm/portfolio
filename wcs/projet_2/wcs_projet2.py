import streamlit as st
from wcs.projet_2.reco import afficher_reco
from wcs.projet_2.viz import afficher_viz

def afficher_wcs_projet2():
    # Initialisation de la variable pour suivre la page active
    if "page_projet2" not in st.session_state:
        st.session_state.page_projet2 = "accueil"  # Par d√©faut, la page d'accueil du projet 2 est affich√©e

    # D√©finition d'une fonction pour changer la page active
    def set_page(page_name):
        st.session_state.page_projet2 = page_name  # Modification de la variable pour changer de page

    # Configuration de la barre de navigation avec plusieurs colonnes
    col1, col2, col3, col4, col5 = st.columns([1, 2, 2, 2, 1])  # Distribution des colonnes
    with col2:
        if st.button("Accueil", use_container_width=True):  # Bouton Accueil
            set_page("accueil")  # Change la page en 'accueil' lorsque ce bouton est press√©
    with col3:
        if st.button("Visualisations", use_container_width=True):  # Bouton Visualisations
            set_page("viz")  # Change la page en 'viz' lorsque ce bouton est press√©
    with col4:
        if st.button("Recommandation", use_container_width=True):  # Bouton Recommandation
            set_page("reco")  # Change la page en 'reco' lorsque ce bouton est press√©

    # Ajout d'un espacement entre la navigation et le contenu de la page
    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    # Affichage de la page correspondant √† la variable `st.session_state.page_projet2`
    if st.session_state.page_projet2 == "accueil":

        # Titre + explication du projet
        st.markdown("<h1 style='text-align: center; color: white;'>Projet 2 : Analyse de donn√©es et Machine Learning dans le Cin√©ma</h1>", unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")


        # Disposition de l'image du logo (centr√©e sur la page)
        col1, col2, col3 = st.columns([3, 2, 3])  # Cr√©ation de trois colonnes de largeur relative (col2 sera au centre)
        with col2:  # Affichage de l'image dans la colonne du centre
            st.image("wcs/projet_2/logo_sans_fond.png", width=150)  # L'image est redimensionn√©e √† 10% de sa largeur d'origine

        #Espace
        st.write("")
        st.write("")


        st.markdown("""
        <div style='text-align: center; color: white; font-size: 20px;'>
        Dans ce projet, j'ai travaill√© sur l'analyse du march√© du cin√©ma et le d√©veloppement d'un moteur de recommandation bas√© sur le Machine Learning.  
        L'objectif √©tait d'aider un cin√©ma local √† mieux comprendre son public et √† proposer des films adapt√©s √† ses pr√©f√©rences.<br><br>
        Vous pouvez naviguer dans avec les onglets visualisation et recommandation,<br>
        (un petit temps de chargement est n√©cessaire pour charger les donn√©es h√©berg√©es sur mon drive).
        </div>
        """, unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")


        # √âtapes du projet
        st.markdown("""
        ## üîç √âtapes r√©alis√©es :
        """)

        #Espace
        st.write("")
        st.write("")

        st.markdown("""
        ### 1Ô∏è‚É£ Analyse des donn√©es avec Pandas üìä :
        - R√©cup√©ration des donn√©es depuis TMDB et IMDB.
        - Exploration et traitement des donn√©es relatives aux films, genres, r√©alisateurs et audiences.
        - Identification des tendances cl√©s du march√© du cin√©ma (genres populaires, r√©alisateurs appr√©ci√©s, etc.).
        """)

        # URL vers le notebook traitement h√©berg√©
        traitement = "https://nbviewer.org/github/Julcrm/Recommandation_films/blob/9ee7c720c705630ecd7b3f5b8579a500a9909682/traitements.ipynb"

        #Espace
        st.write("")

        # Affichage avec iframe
        with st.expander("Cliquez ici pour afficher le notebook traitement et nettoyage des donn√©es"):
            st.markdown(f'<iframe src="{traitement}" width="100%" height="800px"></iframe>', unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")

        st.markdown("""
        ### 2Ô∏è‚É£ Cr√©ation d‚Äôun moteur de recommandation avec Scikit-Learn üß† :
        - Mise en place d'un pipeline pour g√©rer les donn√©es num√©riques et cat√©gorielles.
        - Mise en place d‚Äôun algorithme de recommandation bas√© sur le mod√®le NearestNeighbors.
        - Attribution de poids aux diff√©rentes cat√©gories.
        - Optimisation et validation des performances du mod√®le.
        """)
        
        # URL vers le notebook machine learning h√©berg√©
        machine_learning= "https://nbviewer.org/github/Julcrm/Recommandation_films/blob/9ee7c720c705630ecd7b3f5b8579a500a9909682/reco.ipynb"

        #Espace
        st.write("")

        # Affichage avec iframe
        with st.expander("Cliquez ici pour afficher le notebook machine learning"):
            st.markdown(f'<iframe src="{machine_learning}" width="100%" height="800px"></iframe>', unsafe_allow_html=True)

        #Espace
        st.write("")
        st.write("")

        st.markdown("""
        ### 3Ô∏è‚É£ D√©veloppement d‚Äôun outil interactif avec Streamlit üåê :
        - Pr√©sentation des r√©sultats de l‚Äôanalyse du march√© sous forme de graphiques.
        - Int√©gration du moteur de recommandation dans une application Streamlit pour une utilisation facile et intuitive.
        - Int√©gration d'une interface de recommandation avec l'API de l'IA Gemini.
        
        """)

        #Espace
        st.write("")
        st.write("")

        # R√©sultat
        st.markdown("""
        ## üí° R√©sultat :
        Un outil puissant et intuitif, offrant :
        - Un tableau de bord pour explorer les tendances du march√© du cin√©ma.
        - Un moteur de recommandation selon le film choisi ou une interface de recommandation selon la demande. 
        """)

        #Espace
        st.write("")

        st.markdown("""
        Ce projet a permis de d√©montrer la puissance des donn√©es et du Machine Learning dans un domaine cr√©atif comme le cin√©ma.
        """)


    elif st.session_state.page_projet2 == "viz":
        # Page de visualisation : Appel de la fonction pour afficher les visualisations
        afficher_viz()

    elif st.session_state.page_projet2 == "reco":
        # Page de recommandations : Appel de la fonction pour afficher les recommandations
        afficher_reco()


